@using KISD.Common
@using KISD.Areas.BlogAdmin.Models
@using MvcContrib.UI.Grid;
@using MvcContrib.UI.Pager
@model PagedViewModel<BlogsModel>
@{
    var message = TempData["AlertMessage"] ?? string.Empty;
    var alertmessage = TempData["Message"] ?? string.Empty;
    var BlogID = Request.QueryString["BlogID"] != null ? Request.QueryString["BlogID"].ToString() : "0";
    var pager = TempData["pager"] ?? string.Empty;
    var sortColumn = Request.QueryString["Column"] != null ? Request.QueryString["Column"].ToString() : "TitleTxt";
    var sortDirection = Request.QueryString["Direction"] != null ? Request.QueryString["Direction"].ToString() : "Ascending";
    var pagesize = Request.QueryString["pagesize"] != null ? Request.QueryString["pagesize"].ToString() : Common._pageSize.ToString();
    var pagerID = Request.QueryString["page"] != null ? Request.QueryString["page"].ToString() : Common._currentPage.ToString();
    var page = Request.QueryString["page"] != null ? Request.QueryString["page"].ToString() : Common._currentPage.ToString();
    var AppPath1 = (Request.IsSecureConnection ? "https://" : "http://") + (HttpContext.Current.Request.Url.DnsSafeHost)
                                       + (HttpContext.Current.Request.IsLocal ? (":" + HttpContext.Current.Request.Url.Port.ToString()) :
                                       (HttpContext.Current.Request.ApplicationPath.Length > 1 ? HttpContext.Current.Request.ApplicationPath : ""))
                                       + "/BlogAdmin/Blogs/BlogsListing?page=1&Column=" + sortColumn + "&Direction=" + sortDirection + "&pagesize=";
    var CommnetContext = new KISD.Areas.BlogAdmin.Contexts.CommentContexts();
    AppPath1 = Common.ReturnValidPath(AppPath1);

}
<div class="Main_PartialHeader">

    <!-- widget-header Ends -->
    <div class="pager paging-top">
        <!-- pager -->
        @if (Model.PagedList.Any())
        {
            <div class="select-style" id="divPager">
                <select id="ddlPager" name="ddlPager" class="ddlpgr">
                    <option value="@(AppPath1)10" text="10">10</option>
                    <option value="@(AppPath1)25" text="25">25</option>
                    <option value="@(AppPath1)50" text="50">50</option>
                    <option value="@(AppPath1)100" text="100">100</option>
                    <option value="@(AppPath1)0" text="0">All</option>
                </select>
            </div>
        }
        <div class="pagination">
            @Html.Raw(Html.Pager(Model.PagedList).First("First").Last("Last").Next("Next").Previous("Previous"))
        </div>
        <!-- pagination -->
    </div>

    <div class="wrapper">
        <div class="tab-pane active">
            @if (Model.PagedList.Any())
            {
                @Html.Grid(Model.PagedList).Columns(column =>
           {
               column.For(x => x.TitleTxt).Named("Title").SortColumnName("TitleTxt")
                   .HeaderAttributes(@class => "sort", @align => "left", @style => "width:35%;").Visible(true).Attributes(@align => "left")
                   .HeaderAttributes(new Dictionary<string, object> {   });

               column.For(x => x.AuthorNameTxt).Named("Author Name").SortColumnName("AuthorNameTxt")
                   .HeaderAttributes(@class => "sort", @align => "left", @style => "width:15%;").Visible(true).Attributes(@align => "left")
                   .HeaderAttributes(new Dictionary<string, object> { { "data-hide", "phone" } });

               column.For(x => x.PostedDate.ToShortDateString()).Named("Posted On").SortColumnName("PostedDate")
                   .HeaderAttributes(@class => "sort", @align => "left", @style => "width:10%;").Visible(true).Attributes(@align => "left")
                   .HeaderAttributes(new Dictionary<string, object> { { "data-hide", "phone" } });

               column.For(x => Html.ActionLink(CommnetContext.GetComments().Where(y => y.BlogID == Convert.ToInt32(x.BlogID)).Count().ToString(), "CommentListing", "Comment"
                   , new { BlogID = x.BlogID, pagesize = pagesize, page = page, Direction = sortDirection }
                   , null)).Named("No. Of Comments").Sortable(false)
                       .HeaderAttributes(new Dictionary<string, object> { { "style", "width:10%" }, { "class", "footable-sorted-desc" }, { "data-hide", "phone" } })
                            .Attributes(@align => "center");

               column.For(x => Html.CheckBox("chkActive", x.IsActiveInd, new { @class = "checkbox", @value = x.BlogID })).Encode(false).Header("<th data-hide='phone,tablet'  width='10%' >Status</th>").Visible(true).Attributes(@align => "center");

               column.For(x => Html.ActionLink("Edit", "CreateBlog", "Blogs"
                   , new { BlogID = x.BlogID, pagesize = pagesize, page = page, Column = sortColumn, Direction = sortDirection }
                   , new { @class = "edit" })).Named("Edit").Sortable(false)
                       .HeaderAttributes(new Dictionary<string, object> { { "style", "width:10%" }, { "data-hide", "phone,tablet" }, { "class", "footable-sorted-desc" } })
                            .Attributes(@align => "center");

               column.For(x => Html.ActionLink("Delete", "Delete", "Blogs", new { BlogID = x.BlogID, pagesize = pagesize, page = page, Column = sortColumn, Direction = sortDirection }
                                               , new { @class = "delete PostLink", @val = x.TitleTxt })).Sortable(false).Named("Delete")
                           .HeaderAttributes(new Dictionary<string, object> { { "style", "width:10%" }, { "data-hide", "phone,tablet" } })
                           .Attributes(@align => "center");

           }).Sort(Model.GridSortOptions).Attributes(@class => "table table-bordered", @CellSpacing => "0", @CellPadding => "2");
            }
            else
            {
                <div>
                    <div class="nodatafound">
                        No Data Found.
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="pager">
        <!-- pager -->
        @if (Model.PagedList.Any())
        {
            <div class="select-style">
                <select id="ddlPager1" name="ddlPager1" class="ddlpgr">
                    <option value="@(AppPath1)10" text="10">10</option>
                    <option value="@(AppPath1)25" text="25">25</option>
                    <option value="@(AppPath1)50" text="50">50</option>
                    <option value="@(AppPath1)100" text="100">100</option>
                    <option value="@(AppPath1)0" text="0">All</option>
                </select>
            </div>
        }
        <div class="pagination">
            @Html.Raw(Html.Pager(Model.PagedList).First("First").Last("Last").Next("Next").Previous("Previous"))
        </div>
        <!-- pagination -->
    </div>

    @Html.Hidden("returnUrl", this.Request.RawUrl)
    <input type="hidden" name="hdncheckboxselected" id="hdncheckboxselected" value="" />
    <input type="hidden" name="hdnvalue" id="hdnvalue" value="" />
</div>

<script type="text/javascript">

    //Scroll window to top
    window.scrollTo(0, 0);

    var alertmessage = '@alertmessage';
    if (alertmessage != '')
        alert(alertmessage);

    var message = '@message';
    if (message) {
        var het = $('.message').outerHeight();
        $('.message').css('top', -het); //move element outside viewport
        showMessage(message);
        setTimeout(function () {
            hidemessage()
        }, 3000);
    }

    function showMessage(msg) {
        $(".checkbox").prop("disabled", true);
        $('#notifyDiv').show();
        $('.message').animate({ top: "0" }, 500);
        $('#notifyMsg').html(msg);
    }

    function hidemessage() {
        var ht = $('.message').outerHeight();
        $('.message').animate({ top: -ht }, 500);
        $(".checkbox").prop("disabled", false);// Make status check box enable after message hides
        setTimeout(function () {
            $('#notifyDiv').hide();
        }, 500);
    }

    ////Ajax Drop down Pagination Section starts
    $('.ddlpgr').on('change', function () {
        var url = $(this).val();
        // Declare String object of model AjaxRequest
        var objresult = {
            ajaxcall: 'ddlPaging', //ajaxcall parameter is used to define which ajax call if posted
            hfid: '',
            hfvalue: '',
            qs_shownonhomevalue: '',
            qs_checkboxselected: '',
            qs_value: '',
            qs_Type: ''
        };
        $.ajax({
            url: url,
            type: 'Get',
            data: { "objresult": JSON.stringify(objresult) },
            cache: false,
            success: function (result) {
                var pager = $(".ddlPgr").find("option:selected").prop("text");
                if (pager) {
                    $(".ddlPgr option[text=" + pager + "]").prop("selected", true);
                }
                objresult = null;
                $('.Main_PartialHeader').replaceWith(result);
                $(function () {
                    $('table').footable();
                });
            }
        });
        return false;
    });

    //Ajax Next Previous Pagination Section starts
    $('.paginationRight a').on('click', function () {
        var url = $(this).attr('href');
        var url_new = url.substring(0, url.indexOf('&objresult'));
        if (url_new != '') {
            $(this).attr('href', url_new);
            url = url_new;
        }
        var objresult = { // String object of model AjaxRequest
            ajaxcall: 'paging',    //ajaxcall parameter is used to define which ajax call if posted
            hfid: '',
            hfvalue: '',
            qs_shownonhomevalue: '',
            qs_checkboxselected: '',
            qs_value: '',
            qs_Type: ''
        };

        $.ajax({
            url: url,
            type: 'Get',
            data: { "objresult": JSON.stringify(objresult) },
            cache: false,
            success: function (result) {
                objresult = null;
                $('.Main_PartialHeader').replaceWith(result);
                $(function () {
                    $('table').footable();
                });
            }
        });
        return false;
    });

    //Ajax Column sorting Section starts
    $('.table thead tr th a').on('click', function (evt) {
        var url = $(this).attr('href');
        var url_new = url.substring(0, url.indexOf('&objresult'));
        if (url_new != '') {
            $(this).attr('href', url_new);
            url = url_new;
        }

        var objresult = { // String object of model AjaxRequest
            ajaxcall: 'sorting',    //ajaxcall parameter is used to define which ajax call if posted
            hfid: '',
            hfvalue: '',
            qs_shownonhomevalue: '',
            qs_checkboxselected: '',
            qs_value: '',
            qs_Type: ''
        };
        $.ajax({
            url: url,
            type: 'Get',
            data: { objresult: JSON.stringify(objresult) },
            cache: false,
            success: function (result) {
                objresult = null;
                $('.Main_PartialHeader').replaceWith(result);
                $(function () {
                    $('table').footable();
                });
            }
        });
        return false;
    });

    //Ajax call for status check box Active/Inactive
    $('.checkbox').click(function () {
        var pager = $(".ddlPgr").find("option:selected").prop("text");
        var hfid; var hfvalue;
        if ($(this).is(':checked')) {
            hfid = $(this).attr('value')
            hfvalue = '1';
        } else {
            hfid = $(this).attr('value')
            hfvalue = '0';
        }
        var url = $(this).attr('text') + pager;//passing pager =(dropdown page no value), hfid=image ID, hfvalue= 1,0 for active or inactive
        var objresult = { // String object of model AjaxRequest
            ajaxcall: 'status',    //ajaxcall parameter is used to define which ajax call if posted
            hfid: hfid,
            hfvalue: hfvalue,
            qs_shownonhomevalue: '',
            qs_checkboxselected: '',
            qs_value: '',
            qs_Type: ''
        };

        $.ajax({
            url: url,
            type: 'Get',
            data: { "objresult": JSON.stringify(objresult) },
            cache: false,
            success: function (result) {
                objresult = null;
                $('.Main_PartialHeader').replaceWith(result);
                $(function () {
                    $('table').footable();
                });
            }
        });
        return false;
    });

    // Ajax call for display order section
    $("a.PostLink").click(function (e) {
        e.preventDefault();
        if (window.confirm('Are you sure you want to delete ' + $(this).attr('val') + '?')) {
            $.post($(this).attr("href"), function (data) {
                window.location.href = data;
            });
        }
    });
    //.. for pager dropdown selectedvalue
    var pager = '@pager';
    if (pager) {
        $("#ddlPager option[text=" + pager + "]").prop("selected", true);
        $("#ddlPager1 option[text=" + pager + "]").prop("selected", true);
    }

</script>